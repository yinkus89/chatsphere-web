openapi: 3.0.3
info:
  title: ChatSphere API
  version: 1.0.0
  description: API for ChatSphere, a real-time chat application.
  contact:
    name: ChatSphere Support
    url: https://your-api-server.com/support
    email: support@chatsphere.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: "https://virtserver.swaggerhub.com/YINKAWLB/chatterbox1/1.0.0"
    description: SwaggerHub API Auto Mocking
  - url: "https://your-api-server.com/api"
    description: Production Server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "12345"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "user@example.com"
      required:
        - id
        - name
        - email
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Resource not found"
      required:
        - error
paths:
  /auth/login:
    post:
      summary: User Login.
      description: Authenticate a user and retrieve a token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  example: "yourPassword123"
              required:
                - email
                - password
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "JWT_TOKEN"
                  user:
                    $ref: "#/components/schemas/User"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auth/register:
    post:
      summary: User Registration.
      description: Register a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  example: "yourPassword123"
              required:
                - name
                - email
                - password
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /user/{id}/profile:
    get:
      summary: Get User Profile.
      description: Retrieve user profile data.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
      responses:
        "200":
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /chat/send:
    post:
      summary: Send Message.
      description: Send a chat message to a user or group.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                to:
                  type: string
                  example: "USER_OR_GROUP_ID"
                message:
                  type: string
                  example: "Hello!"
              required:
                - to
                - message
      responses:
        "200":
          description: Message sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Message sent successfully"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /upload:
    post:
      summary: Upload Profile Picture.
      description: Upload a profile picture or status image.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
              required:
                - image
      responses:
        "200":
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Image uploaded successfully"
                  imageUrl:
                    type: string
                    example: "URL_TO_UPLOADED_IMAGE"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /geo/share:
    post:
      summary: Share Location.
      description: Share the user's geolocation.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: "USER_ID"
                location:
                  type: object
                  properties:
                    latitude:
                      type: number
                      example: 12.345678
                    longitude:
                      type: number
                      example: 98.765432
                  required:
                    - latitude
                    - longitude
              required:
                - userId
                - location
      responses:
        "200":
          description: Location shared successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Location shared successfully"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
